/* import { useState, useEffect } from 'react';
import SoundComponent from '../Components/SoundComponent';
import './IPAChart.css';
import speakText from './speakText';

const IPAChart = () => {
  const [clicks, setClicks] = useState({
    // Initialize clicks with all symbols and their initial click count set to 0
    a: 0, ɪ: 0, e: 0, ɛ: 0, æ: 0, ɑ: 0, ɔ: 0, o: 0, ʊ: 0, u: 0, ə: 0, ɜ: 0, ʌ: 0, ɒ: 0, ɐ: 0, 'ɑː': 0, 'ɔː': 0, 'ɜː': 0, 'ɪə': 0, 'ɛə': 0, 'ʊə': 0,
    p: 0, b: 0, t: 0, d: 0, k: 0, g: 0, 'tʃ': 0, 'dʒ': 0, f: 0, v: 0, s: 0, z: 0,θ: 0, ð: 0,  'ʃ': 0, 'ʒ': 0, h: 0, l: 0, r: 0,w: 0,j: 0,m:0,n:0, ŋ: 0,   
  });
  const [currentSymbol, setCurrentSymbol] = useState(null);
  const [currentContent, setCurrentContent] = useState(null);

  const monothongs = ['a', 'ɪ', 'e', 'ɛ', 'æ', 'ɑ', 'ɔ', 'o', 'ʊ', 'u', 'ə', 'ɜ', 'ʌ', 'ɒ', 'ɐ', 'ɑː', 'ɔː', 'ɜː', 'ɪə', 'ɛə', 'ʊə'];
  const consonants = ['p', 'b', 't', 'd', 'k', 'g', 'tʃ', 'dʒ', 'f', 'v', 's','z','θ', 'ð',   'ʃ', 'ʒ', 'h', 'l', 'r','w','j','m', 'n', 'ŋ',];
  const allSymbols = [...monothongs, ...consonants];


  const examplesMonothongs = {
    // Monophthongs examples
    'a': 'Example of a: apple, ant',
    'ɪ': 'Example of ɪ: sit, bit',
    'e': 'Example of e: bed, head',
    'ɛ': 'Example of ɛ: bet, let',
    'æ': 'Example of æ: bat, cat',
    'ɑ': 'Example of ɑ: spa, far',
    'ɔ': 'Example of ɔ: saw, law',
    'o': 'Example of o: go, no',
    'ʊ': 'Example of ʊ: book, look',
    'u': 'Example of u: boot, toot',
    'ə': 'Example of ə: sofa, about',
    'ɜ': 'Example of ɜ: bird, herd',
    'ʌ': 'Example of ʌ: cut, hut',
    'ɒ': 'Example of ɒ: cot, lot',
    'ɐ': 'Example of ɐ: about, comma',
    'ɑː': 'Example of ɑː: father, car',
    'ɔː': 'Example of ɔː: thought, law',
    'ɜː': 'Example of ɜː: bird, herd',
    'ɪə': 'Example of ɪə: ear, here',
    'ɛə': 'Example of ɛə: air, care',
    'ʊə': 'Example of ʊə: tour, sure',
  };
  const examplesConsonants = {
    // Consonants examples
    'p': 'Example of p: pet, cup',
    't': 'Example of t: top, pot',
    'k': 'Example of k: cat, kill',
    'b': 'Example of b: bat, rib',
    'd': 'Example of d: dog, mad',
    'g': 'Example of g: get, egg',
    'tʃ': 'Example of tʃ: chat, nature',
    'dʒ': 'Example of dʒ: job, edge',
    'f': 'Example of f: fun, leaf',
    'v': 'Example of v: van, have',
    'θ': 'Example of θ: think, path',
    'ð': 'Example of ð: this, breathe',
    's': 'Example of s: sit, bus',
    'z': 'Example of z: zoo, has',
    'ʃ': 'Example of ʃ: she, emotion',
    'ʒ': 'Example of ʒ: pleasure, vision',
    'h': 'Example of h: hat, ahead',
    'm': 'Example of m: man, ham',
    'n': 'Example of n: nut, pen',
    'ŋ': 'Example of ŋ: sing, ring',
    'l': 'Example of l: lion, ball',
    'ɹ': 'Example of ɹ: rat, car',
    'j': 'Example of j: yes, yellow',
    'w': 'Example of w: wolf, wing',
  };

  const descriptionsMonothongs = {
    // Monothongs descriptions
    'a': 'Description of a: Front open unrounded vowel',
    'ɪ': 'Description of ɪ: Front close unrounded vowel',
    'e': 'Description of e: Front mid unrounded vowel',
    'ɛ': 'Description of ɛ: Front open-mid unrounded vowel',
    'æ': 'Description of æ: Front near-open unrounded vowel',
    'ɑ': 'Description of ɑ: Back open unrounded vowel',
    'ɔ': 'Description of ɔ: Back open-mid rounded vowel',
    'o': 'Description of o: Back mid rounded vowel',
    'ʊ': 'Description of ʊ: Back close rounded vowel',
    'u': 'Description of u: Back close rounded vowel',
    'ə': 'Description of ə: Mid central unrounded vowel',
    'ɜ': 'Description of ɜ: Mid central unrounded vowel',
    'ʌ': 'Description of ʌ: Back open-mid unrounded vowel',
    'ɒ': 'Description of ɒ: Back open rounded vowel',
    'ɐ': 'Description of ɐ: Near-open central vowel',
    'ɑː': 'Description of ɑː: Back open unrounded vowel (long)',
    'ɔː': 'Description of ɔː: Back open-mid rounded vowel (long)',
    'ɜː': 'Description of ɜː: Mid central unrounded vowel (long)',
    'ɪə': 'Description of ɪə: Diphthong - closing (Front close unrounded vowel)',
    'ɛə': 'Description of ɛə: Diphthong - closing (Front open-mid unrounded vowel)',
    'ʊə': 'Description of ʊə: Diphthong - closing (Back close rounded vowel)',
  };
  const descriptionsConsonants  = {
    'p': 'Description of p: Voiceless bilabial plosive',
    't': 'Description of t: Voiceless alveolar plosive',
    'k': 'Description of k: Voiceless velar plosive',
    'b': 'Description of b: Voiced bilabial plosive',
    'd': 'Description of d: Voiced alveolar plosive',
    'g': 'Description of g: Voiced velar plosive',
    'tʃ': 'Description of tʃ: Voiceless postalveolar affricate',
    'dʒ': 'Description of dʒ: Voiced postalveolar affricate',
    'f': 'Description of f: Voiceless labiodental fricative',
    'v': 'Description of v: Voiced labiodental fricative',
    'θ': 'Description of θ: Voiceless dental fricative',
    'ð': 'Description of ð: Voiced dental fricative',
    's': 'Description of s: Voiceless alveolar fricative',
    'z': 'Description of z: Voiced alveolar fricative',
    'ʃ': 'Description of ʃ: Voiceless postalveolar fricative',
    'ʒ': 'Description of ʒ: Voiced postalveolar fricative',
    'h': 'Description of h: Voiceless glottal fricative',
    'm': 'Description of m: Voiced bilabial nasal',
    'n': 'Description of n: Voiced alveolar nasal',
    'ŋ': 'Description of ŋ: Voiced velar nasal',
    'l': 'Description of l: Voiced alveolar lateral approximant',
    'ɹ': 'Description of ɹ: Voiced postalveolar approximant',
    'j': 'Description of j: Voiced palatal approximant',
    'w': 'Description of w: Voiced labio-velar approximant',
  };

  const brailleRepresentationsMonothongs = {
    // Monophthongs Braille representations
    'a': 'Braille representation of a: ⠄',
    'ɪ': 'Braille representation of ɪ: ⠊',
    'e': 'Braille representation of e: ⠁',
    'ɛ': 'Braille representation of ɛ: ⠑',
    'æ': 'Braille representation of æ: ⠆',
    'ɑ': 'Braille representation of ɑ: ⠕',
    'ɔ': 'Braille representation of ɔ: ⠛',
    'o': 'Braille representation of o: ⠕',
    'ʊ': 'Braille representation of ʊ: ⠥',
    'u': 'Braille representation of u: ⠥',
    'ə': 'Braille representation of ə: ⠃',
    'ɜ': 'Braille representation of ɜ: ⠢',
    'ʌ': 'Braille representation of ʌ: ⠢',
    'ɒ': 'Braille representation of ɒ: ⠯',
    'ɐ': 'Braille representation of ɐ: ⠪',
    'ɑː': 'Braille representation of ɑː: ⠕',
    'ɔː': 'Braille representation of ɔː: ⠛',
    'ɜː': 'Braille representation of ɜː: ⠢',
    'ɪə': 'Braille representation of ɪə: ⠊',
    'ɛə': 'Braille representation of ɛə: ⠑',
    'ʊə': 'Braille representation of ʊə: ⠥',
  };
  const brailleRepresentationsConsonants  = {
    'p': 'Braille representation of p: ⠏',
    't': 'Braille representation of t: ⠞',
    'k': 'Braille representation of k: ⠅',
    'b': 'Braille representation of b: ⠃',
    'd': 'Braille representation of d: ⠙',
    'g': 'Braille representation of g: ⠛',
    'tʃ': 'Braille representation of tʃ: ⠉⠓',
    'dʒ': 'Braille representation of dʒ: ⠙⠛',
    'f': 'Braille representation of f: ⠋',
    'v': 'Braille representation of v: ⠧',
    'θ': 'Braille representation of θ: ⠹',
    'ð': 'Braille representation of ð: ⠩',
    's': 'Braille representation of s: ⠎',
    'z': 'Braille representation of z: ⠵',
    'ʃ': 'Braille representation of ʃ: ⠩',
    'ʒ': 'Braille representation of ʒ: ⠹',
    'h': 'Braille representation of h: ⠓',
    'm': 'Braille representation of m: ⠍',
    'n': 'Braille representation of n: ⠝',
    'ŋ': 'Braille representation of ŋ: ⠺',
    'l': 'Braille representation of l: ⠇',
    'ɹ': 'Braille representation of ɹ: ⠗',
    'j': 'Braille representation of j: ⠚',
    'w': 'Braille representation of w: ⠺',
  };
  const handleClick = (symbol) => {
    const clickCount = clicks[symbol];
    setClicks({ ...clicks, [symbol]: clickCount + 1 });
    setCurrentSymbol(symbol);
    setCurrentContent(getContent(symbol, clickCount));
  
    const contentToSpeak = `Example: ${examplesMonothongs[symbol] || examplesConsonants[symbol]}. 
      Description: ${descriptionsMonothongs[symbol] || descriptionsConsonants[symbol]}. 
      Braille Representation: ${brailleRepresentationsMonothongs[symbol] || brailleRepresentationsConsonants[symbol]}`;
    speakText(contentToSpeak);
  };

  useEffect(() => {
    // Add event listener for keyboard keydown
    const handleKeyDown = (event) => {
      const key = event.key.toLowerCase();
      if (allSymbols.includes(key)) {
        handleClick(key);
      }
    };

    // Add event listener
    window.addEventListener('keydown', handleKeyDown);

    // Remove event listener on cleanup
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  });


  const getContent = (symbol, clickCount) => {
    switch (clickCount % 4) {
      case 0:
        return ` ${symbol}`;
      case 1:
        return ` ${symbol}`;
      case 2:
        return `Example: ${examplesMonothongs[symbol] || examplesConsonants[symbol]}`;
      case 3:
        return `Description: ${descriptionsMonothongs[symbol] || descriptionsConsonants[symbol]}`;
      default:
        return '';
    }
  };

  useEffect(() => {
    const handleKeyDown = (event) => {
      const keyPressed = event.key.toLowerCase();
      if (allSymbols.includes(keyPressed)) {
        handleClick(keyPressed);
      }
    };

    window.addEventListener('keydown', handleKeyDown);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  useEffect(() => {
    if (currentSymbol && currentContent) {
      speakText(currentContent);
    }
  }, [currentContent]);
  useEffect(() => {
    const handleKeyPress = (event) => {
      const key = event.key.toLowerCase();
      if (allSymbols.includes(key)) {
        setClicks({ ...clicks, [key]: clicks[key] + 1 });
        setCurrentSymbol(key);
        setCurrentContent(getContent(key, clicks[key]));
        const contentToSpeak = `Example: ${examplesMonothongs[key] || examplesConsonants[key]}. 
        Description: ${descriptionsMonothongs[key] || descriptionsConsonants[key]}. 
        Braille Representation: ${brailleRepresentationsMonothongs[key] || brailleRepresentationsConsonants[key]}`;
        speakText(contentToSpeak);
      }
    };

    window.addEventListener('keydown', handleKeyPress);

    return () => {
      window.removeEventListener('keydown', handleKeyPress);
    };
  }, [clicks]);

 

  return (
    <div className="ipa-chart">
      <h1>IPA Chart</h1>
      <h2>Monophthongs</h2>
      <div className="monothongs-section">
        {monothongs.map((symbol) => (
          <button
            key={symbol}
            className="monothong-button"
            onClick={() => handleClick(symbol)}
          >
            {symbol}
          </button>
        ))}
      </div>
      <h2>Consonants</h2>
      <div className="consonants-section">
        {consonants.map((symbol) => (
          <button
            key={symbol}
            className="consonant-button"
            onClick={() => handleClick(symbol)}
          >
            {symbol}
          </button>
        ))}
      </div>
      <div className="content-section">
        {currentContent && (
          <>
            <SoundComponent
              symbol={currentSymbol}
              content={currentContent}
            />
            <div>
              <h3>Examples:</h3>
              <p>{examplesMonothongs[currentSymbol] || examplesConsonants[currentSymbol]}</p>
              <h3>Description:</h3>
              <p>{descriptionsMonothongs[currentSymbol] || descriptionsConsonants[currentSymbol]}</p>
              <h3>Braille Representation:</h3>
              <p>{brailleRepresentationsMonothongs[currentSymbol] || brailleRepresentationsConsonants[currentSymbol]}</p>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default IPAChart; */
